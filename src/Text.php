<?php

namespace Vertilia\Text;

class Text implements TextInterface
{
    /**
     * @var array overloaded array of translations, generated by po2php from PO file
     */
    protected array $translations = [];

    /**
     * Overloaded method, generated by po2php from rules in source PO file.
     *
     * @param int $n
     * @return int 0-based index of plural form to use for provided $n
     */
    protected function plural(int $n): int
    {
        return (int)($n != 1);
    }

    /**
     * Defines message hash, uses crc32b algo for better portability.
     *
     * @param string $message
     * @return string
     */
    public function hash(string $message): string
    {
        return hash('crc32b', $message);
    }

    /**
     * Fetches an existing string from $translations by its hash and
     * message text (in case of collision)
     *
     * @param string $message the original message text used to produce the hash
     * @param string $default message text to use if translation not found
     * @return string
     */
    protected function fetch(string $message, string $default): string
    {
        $hash = $this->hash($message);

        return isset($this->translations[$hash])
            ? (is_array($this->translations[$hash])
                ? ($this->translations[$hash][$message] ?? $this->translations[$hash][$hash])
                : $this->translations[$hash]
            )
            : $default;
    }

    /**
     * @inheritDoc
     */
    public function _(string $message): string
    {
        return $this->fetch($message, $message);
    }

    /**
     * @inheritDoc
     */
    public function pget(string $context, string $message): string
    {
        return $this->fetch("$message\f$context", $message);
    }

    /**
     * @inheritDoc
     */
    public function nget(string $singular, string $plural, int $count): string
    {
        return $this->fetch(
            "$singular\f$plural\f{$this->plural($count)}",
            $count == 1 ? $singular : $plural
        );
    }

    /**
     * @inheritDoc
     */
    public function npget(string $context, string $singular, string $plural, int $count): string
    {
        return $this->fetch(
            "$singular\f$context\f$plural\f{$this->plural($count)}",
            $count == 1 ? $singular : $plural
        );
    }
}
